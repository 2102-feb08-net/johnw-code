-- 2/22/2021 Exercise - create the following database in your SQL Server instance
-- Products
	-- ID
	-- Name
	-- Price
-- Customers
	-- ID
	-- Firstname
	-- Lastname
	-- CardNumber
-- Orders
	-- ID
	-- ProductID
	-- CustomerID

-- add at least 3 records into each table.
-- add product 'iPhone' priced at $200.
-- add customer 'Tina Smith.'
-- create order for 'Tina Smith bought an iPhone.'
-- report all orders by 'Tina Smith'.
-- report all revenue generated by sales of 'iPhone'.
-- increase the price of 'iPhone' to $250.

CREATE SCHEMA ex2;
GO

CREATE TABLE ex2.Product (
	ID INT IDENTITY NOT NULL,
	Name NVARCHAR(255) NOT NULL,
	Price NUMERIC(10, 2) NOT NULL,
	CONSTRAINT PK_Product PRIMARY KEY (ID)
);
GO

CREATE TABLE ex2.Customer (
	ID INT IDENTITY NOT NULL,
	Firstname NVARCHAR(255) NOT NULL,
	Lastname NVARCHAR(255) NOT NULL,
	CardNumber NCHAR(16) NOT NULL
	CONSTRAINT PK_Customer PRIMARY KEY (ID)
);
GO

CREATE TABLE ex2.Orders (
	ID INT IDENTITY NOT NULL,
	ProductID INT NOT NULL,
	CustomerID INT NOT NULL
	CONSTRAINT PK_Orders PRIMARY KEY (ID)
);
GO

-- add foreign keys
ALTER TABLE ex2.Orders ADD CONSTRAINT FK_OrdersProductID
	FOREIGN KEY (ProductID) REFERENCES ex2.Product (ID) ON DELETE NO ACTION ON UPDATE NO ACTION;
GO

ALTER TABLE ex2.Orders ADD CONSTRAINT FK_OrdersCustomerID
	FOREIGN KEY (CustomerID) REFERENCES ex2.Customer (ID) ON DELETE NO ACTION ON UPDATE NO ACTION;
GO

-- populate tables
-- add at least 3 records into each table.
INSERT INTO ex2.Product (Name, Price) VALUES ('Samsung Galaxy', 250.00);
INSERT INTO ex2.Product (Name, Price) VALUES ('Google Pixel', 300.00);
INSERT INTO ex2.Product (Name, Price) VALUES ('Motorola Razr', 350.00);

INSERT INTO ex2.Customer (Firstname, Lastname, CardNumber) VALUES ('Derek', 'Jones', 1234567891234567);
INSERT INTO ex2.Customer (Firstname, Lastname, CardNumber) VALUES ('Tommy', 'Nook', 9999444455556666);
INSERT INTO ex2.Customer (Firstname, Lastname, CardNumber) VALUES ('Aimee', 'Barker', 8120598463102578);

INSERT INTO ex2.Orders (ProductID, CustomerID) VALUES (1, 3);
INSERT INTO ex2.Orders (ProductID, CustomerID) VALUES (2, 2);
INSERT INTO ex2.Orders (ProductID, CustomerID) VALUES (3, 1);
GO

-- add product 'iPhone' priced at $200.
INSERT INTO ex2.Product (Name, Price) VALUES ('iPhone', 200.00);
GO

-- add customer 'Tina Smith.'
INSERT INTO ex2.Customer (Firstname, Lastname, CardNumber) VALUES ('Tina', 'Smith', 4444888822223333);
GO

-- create order for 'Tina Smith bought an iPhone.'
INSERT INTO ex2.Orders (ProductID, CustomerID) VALUES (4, 4);
GO

-- report all orders by 'Tina Smith'.
SELECT o.ID, c.Firstname, c.Lastname, p.Name, p.Price FROM ex2.Orders AS o INNER JOIN ex2.Customer AS c ON o.CustomerID = c.ID INNER JOIN ex2.Product AS p ON o.ProductID = p.ID WHERE c.Firstname = 'Tina' AND c.Lastname = 'Smith';
GO

-- report all revenue generated by sales of 'iPhone'.
SELECT p.Name, SUM(p.Price) AS Total FROM ex2.Orders as o INNER JOIN ex2.Product AS p ON o.ProductID = p.ID WHERE p.Name = 'iPhone' GROUP BY p.Name;

-- last command reported $200 total, adding a new order to confirm that the last command works
INSERT INTO ex2.Orders (ProductID, CustomerID) VALUES (4, 4);
GO

-- increase the price of 'iPhone' to $250.
UPDATE ex2.Product SET Price = 250.00 WHERE Name = 'iPhone';
GO

--as I suspected, that updated the price so now that updated the sales of iPhones to have the higher number... hmm... that doesn't seem ideal...